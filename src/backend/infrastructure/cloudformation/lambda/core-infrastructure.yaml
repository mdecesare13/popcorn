AWSTemplateFormatVersion: '2010-09-09'
Description: 'Popcorn App - Core Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'prod']
  DeploymentBucket:
    Type: String
    Description: 'S3 bucket for Lambda deployment packages'

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: PopcornLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/popcorn-*
        - PolicyName: OpenAISecretAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:popcorn/openai-*

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: popcorn-dependencies
      Description: Redis and other dependencies
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda-layers/dependencies.zip

Outputs:
  LambdaExecutionRoleArn:
    Description: ARN of Lambda Execution Role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleArn

  DependenciesLayerArn:
    Description: ARN of Dependencies Layer
    Value: !Ref DependenciesLayer
    Export:
      Name: !Sub ${AWS::StackName}-DependenciesLayerArn